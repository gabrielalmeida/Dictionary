import React, {Component} from 'react';import ReactNative from 'react-native';import { List, ListItem, Icon, Card, Divider, Button} from 'react-native-elements';const styles = require('../styles.js');const firebase = require('firebase');const { View, TouchableHighlight, Text, ListView, Switch, Share, AsyncStorage, ScrollView } = ReactNative;                // <Icon                // raised                // name='heartbeat'                // type='font-awesome'                // color= 'white'                // onPress={()=>{this.onPressIcon(_key)}}                // />class WordItem extends Component {    constructor(props) {    super(props);    this._shareMessage = this._shareMessage.bind(this);    this._showResult = this._showResult.bind(this);    this.onPressIcon = this.onPressIcon.bind(this);    this.state= {      value_of_likes: 0,      trueSwitchIsOn: false,      result: ''      };    }    componentWillMount() {      this.createDataSource(this.state.value_of_likes);      //AsyncStorage.removeItem('AlreadyLiked');      this._renderSwitchButtonWithAsyncStorage().done;    }     _renderSwitchButtonWithAsyncStorage = async() =>  {              const {_key} = this.props.navigation.state.params;              let token = await AsyncStorage.getItem(JSON.stringify({_key}));              if (token){                this.setState({trueSwitchIsOn: true});              }else{                this.setState({trueSwitchIsOn: false});              }            };    createDataSource(value_of_likes) {      const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });      this.dataSource = ds.cloneWithRows(value_of_likes);    }            onSwitchChange(_key){            const{trueSwitchIsOn}=this.state;              switch (this.state.trueSwitchIsOn){                case false:                  return(                    <TouchableHighlight onClick={this.onPressIcon(_key)}>                    {this.setState({trueSwitchIsOn: true})}                    </TouchableHighlight>                    );                case true:                  return(                  <TouchableHighlight onClick={this.onUnPressIcon(_key)}>                    {this.setState({trueSwitchIsOn: false})}                    </TouchableHighlight>                    );                  }              }            onPressIcon(word){              const {english, english_erudite, likes, _key} = this.props.navigation.state.params;              AsyncStorage.setItem(JSON.stringify({_key}), JSON.stringify({trueSwitchIsOn}));                      const{trueSwitchIsOn}=this.state;                        //Initialize Firebase                        var config = {                        apiKey: "AIzaSyDWedZY1svNHxPUi2ReQJTlCf9Q60407E8",                        authDomain: "streetfrench-a84df.firebaseapp.com",                        databaseURL: "https://streetfrench-a84df.firebaseio.com"                        };                        var ref = firebase.database().ref();                        let childItem = word+"/likes";                        //Create reference                        var likes_words = ref.child("items").child(word).child("likes");                              // Increment by One                               likes_words.transaction(function(currentLike) {                                      return currentLike + 1;                                });                               //Sync Object Changes                               likes_words.on('value', snapshot => {                                      value_of_likes = snapshot.val()                                });                               this.setState({ value_of_likes: value_of_likes});                               this.setState({trueSwitchIsOn : true});                               console.log(value_of_likes)                      }          onUnPressIcon(word){            const {_key} = this.props.navigation.state.params;            AsyncStorage.removeItem(JSON.stringify({_key}));            //const{trueSwitchIsOn}=this.state;                        //Initialize Firebase                        var config = {                        apiKey: "AIzaSyDWedZY1svNHxPUi2ReQJTlCf9Q60407E8",                        authDomain: "streetfrench-a84df.firebaseapp.com",                        databaseURL: "https://streetfrench-a84df.firebaseio.com"                        };                        var ref = firebase.database().ref();                        let childItem = word+"/likes";                        //Create reference                        var likes_words = ref.child("items").child(word).child("likes");                              // Increment by One                               likes_words.transaction(function(currentLike) {                                      return currentLike - 1;                                });                               //Sync Object Changes                               likes_words.on('value', snapshot => {                                      value_of_likes = snapshot.val()                                });                               this.setState({ value_of_likes: value_of_likes});                               this.setState({trueSwitchIsOn : false});                               console.log(value_of_likes)                      }           _showResult(result){              this.setState({result})           }            _shareMessage(mobile_share) {              Share.share({                message: JSON.stringify(mobile_share),                url: "undefined",              }).then(this._showResult);            }render() {    const {english, english_erudite, likes, _key, french, mobile_share, howto} = this.props.navigation.state.params;    return (      <ScrollView>        <TouchableHighlight>            <View style={styles.li}>                <Card                title={french} >                <Text style={styles.MeaningText} >Meaning</Text>                <Text style={styles.liText} >{english}</Text>                <Text style={styles.liText} >{english_erudite}</Text>                <Text style={styles.MeaningText} >How to use it </Text>                <Text style={styles.HowTotext} >{howto}</Text>                <Text style={{marginBottom: 20}}>                 {this.state.value_of_likes !== 0 ? <Text>{this.state.value_of_likes} likes</Text> : <Text>{likes} likes</Text>}                </Text>                <Switch                    onValueChange={(value)=>this.onSwitchChange(_key)}                    style={{marginBottom: 10}}                    value={this.state.trueSwitchIsOn}                    onTintColor='#e67e22'                />                <Button                  title='SPREAD THE WORD!'                  icon= {{name: 'share'}}                  backgroundColor= '#e67e22'                  color='#FFF'                  onPress={()=>{this._shareMessage(mobile_share)}}                />                </Card>           </View>        </TouchableHighlight>      </ScrollView>    );}}export default WordItem;